{-# LANGUAGE GADTs #-}

import Text.Read (readMaybe)
import Data.Maybe (fromMaybe)

type BookID = Int

type HandlerAction = IO

data ServiceStatus = Ok | Down
  deriving (Show)

data Rating = Bad | Good | Great
  deriving (Show)

type ReqHandler a = BookID → HandlerAction a

type Request = [String]

-- data BookInfoAPIImpl = BookInfoAPIImpl
--   { root ∷ !(HandlerAction ServiceStatus),
--     title ∷ !(ReqHandler String),
--     year ∷ !(ReqHandler Int),
--     rating ∷ !(ReqHandler Rating)
--   }

-- GADT (automatically generated by Haskell language server)
data BookInfoAPIImpl where
  BookInfoAPIImpl ∷
    { root ∷ HandlerAction ServiceStatus,
      title ∷ ReqHandler String,
      year ∷ ReqHandler Int,
      rating ∷ ReqHandler Rating
    } →
    BookInfoAPIImpl

impl1 ∷ BookInfoAPIImpl
impl1 =
  BookInfoAPIImpl
    { root = pure Ok,
      title = const $ pure "Haskell in Depth",
      year = const $ pure 2021,
      rating = const $ pure Great
    }

impl2 ∷ BookInfoAPIImpl
impl2 =
  BookInfoAPIImpl
    { root = pure Down,
      title = const notImplemented,
      year = const notImplemented,
      rating = const notImplemented
    }
  where
    notImplemented = fail "not implemented"

encode ∷ Show a ⇒ HandlerAction a → HandlerAction String
encode a = show <$> a

route ∷ BookInfoAPIImpl → Request → Maybe (HandlerAction String)
route impl [] = pure $ encode $ root impl
route impl [op, bookId'] = do
  bookId ← readMaybe bookId'
  case op of
    "title" → pure $ title impl bookId
    "year" → pure . encode $ year impl bookId
    "rating" → pure . encode $ rating impl bookId
    _ → Nothing
route _ _ = Nothing

-- `get` is a small wrapper for `route`
get ∷ BookInfoAPIImpl → Request → HandlerAction String
get impl req = fromMaybe (pure "Malformed request") (route impl req)

------------------------
-- 1st implementation --
------------------------

-- >>> get impl1 []
-- "Ok"
--
-- >>> get impl1 ["title", "4711"]
-- "Haskell in Depth"
--
-- >>> get impl1 ["year", "4711"]
-- "2021"
--
-- >>> get impl1 ["rating", "4711"]
-- "Great"
--
-- >>> get impl1 ["useless", "4711"]
-- "Malformed request"

------------------------
-- 2nd implementation --
------------------------

-- >>> get impl2 []
-- "Down"
--
-- >>> get impl2 ["title", "4711"]
-- user error (not implemented)
--
-- >>> get impl2 ["year", "4711"]
-- user error (not implemented)
--
-- >>> get impl2 ["rating", "4711"]
-- user error (not implemented)
--
-- >>> get impl2 ["useless", "4711"]
-- "Malformed request"

-- Now `check` will be handed a BookInfoAPIImpl. (Compare with previous version!)
check ∷ BookInfoAPIImpl → IO ()
check impl = do
  b ← get impl []
  answer ← get impl ["year", "4711"]
  putStrLn (if b == "Ok" && answer == "2021" then "OK" else "Wrong answer!")

main ∷ IO ()
main = do
  check impl1 -- "OK"
  check impl2 -- "api-stage1: user error (not implemented)"
