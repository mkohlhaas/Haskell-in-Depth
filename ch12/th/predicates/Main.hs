{-# LANGUAGE TemplateHaskell #-}
{-# OPTIONS_GHC -ddump-splices #-}

module Main where

import Predicates (mkPredicates)
import Language.Haskell.TH

data Shape
  = Circle !Double
  | Square !Double
  | Triangle !Double !Double !Double

$(mkPredicates ''Shape)

-- >>> mkPredicates ''Shape
-- No instance for (Show (Q [Dec])) arising from a use of ‘evalPrint’

-- This will be generated by mkPredicates:
-- isCircle ∷ Shape → Bool
-- isCircle = \case
--   Circle _ → True
--   _ → False
--
-- isSquare ∷ Shape → Bool
-- isSquare = \case
--   Square _ → True
--   _ → False
--
-- isTriangle ∷ Shape → Bool
-- isTriangle = \case
--   Triangle _ _ _ → True
--   _ → False

-- >>> s1 = Circle 4
-- >>> s2 = Square 10
-- >>> s3 = Triangle 1 1 1
-- >>> map id [isCircle s1, isSquare s2, isTriangle s3]
-- [True,True,True]

-- >>> s1 = Circle 4
-- >>> s2 = Square 10
-- >>> s3 = Triangle 1 1 1
-- >>> map id [isCircle s2, isSquare s3, isTriangle s1]
-- [False,False,False]

main ∷ IO ()
main = do
  mapM_ print [isCircle s1, isSquare s2, isTriangle s3] -- [True,True,True]
  mapM_ print [isCircle s2, isSquare s3, isTriangle s1] -- [False,False,False]
  where
    s1 = Circle 4
    s2 = Square 10
    s3 = Triangle 1 1 1
